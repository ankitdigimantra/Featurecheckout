"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/rc-tree";
exports.ids = ["vendor-chunks/rc-tree"];
exports.modules = {

/***/ "(ssr)/../../../node_modules/rc-tree/es/utils/conductUtil.js":
/*!*************************************************************!*\
  !*** ../../../node_modules/rc-tree/es/utils/conductUtil.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   conductCheck: () => (/* binding */ conductCheck),\n/* harmony export */   isCheckDisabled: () => (/* binding */ isCheckDisabled)\n/* harmony export */ });\n/* harmony import */ var rc_util_es_warning__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rc-util/es/warning */ \"(ssr)/../../../node_modules/rc-util/es/warning.js\");\n/* harmony import */ var _keyUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./keyUtil */ \"(ssr)/../../../node_modules/rc-tree/es/utils/keyUtil.js\");\n\n\nfunction removeFromCheckedKeys(halfCheckedKeys, checkedKeys) {\n    var filteredKeys = new Set();\n    halfCheckedKeys.forEach(function(key) {\n        if (!checkedKeys.has(key)) {\n            filteredKeys.add(key);\n        }\n    });\n    return filteredKeys;\n}\nfunction isCheckDisabled(node) {\n    var _ref = node || {}, disabled = _ref.disabled, disableCheckbox = _ref.disableCheckbox, checkable = _ref.checkable;\n    return !!(disabled || disableCheckbox) || checkable === false;\n}\n// Fill miss keys\nfunction fillConductCheck(keys, levelEntities, maxLevel, syntheticGetCheckDisabled) {\n    var checkedKeys = new Set(keys);\n    var halfCheckedKeys = new Set();\n    // Add checked keys top to bottom\n    for(var level = 0; level <= maxLevel; level += 1){\n        var entities = levelEntities.get(level) || new Set();\n        entities.forEach(function(entity) {\n            var key = entity.key, node = entity.node, _entity$children = entity.children, children = _entity$children === void 0 ? [] : _entity$children;\n            if (checkedKeys.has(key) && !syntheticGetCheckDisabled(node)) {\n                children.filter(function(childEntity) {\n                    return !syntheticGetCheckDisabled(childEntity.node);\n                }).forEach(function(childEntity) {\n                    checkedKeys.add(childEntity.key);\n                });\n            }\n        });\n    }\n    // Add checked keys from bottom to top\n    var visitedKeys = new Set();\n    for(var _level = maxLevel; _level >= 0; _level -= 1){\n        var _entities = levelEntities.get(_level) || new Set();\n        _entities.forEach(function(entity) {\n            var parent = entity.parent, node = entity.node;\n            // Skip if no need to check\n            if (syntheticGetCheckDisabled(node) || !entity.parent || visitedKeys.has(entity.parent.key)) {\n                return;\n            }\n            // Skip if parent is disabled\n            if (syntheticGetCheckDisabled(entity.parent.node)) {\n                visitedKeys.add(parent.key);\n                return;\n            }\n            var allChecked = true;\n            var partialChecked = false;\n            (parent.children || []).filter(function(childEntity) {\n                return !syntheticGetCheckDisabled(childEntity.node);\n            }).forEach(function(_ref2) {\n                var key = _ref2.key;\n                var checked = checkedKeys.has(key);\n                if (allChecked && !checked) {\n                    allChecked = false;\n                }\n                if (!partialChecked && (checked || halfCheckedKeys.has(key))) {\n                    partialChecked = true;\n                }\n            });\n            if (allChecked) {\n                checkedKeys.add(parent.key);\n            }\n            if (partialChecked) {\n                halfCheckedKeys.add(parent.key);\n            }\n            visitedKeys.add(parent.key);\n        });\n    }\n    return {\n        checkedKeys: Array.from(checkedKeys),\n        halfCheckedKeys: Array.from(removeFromCheckedKeys(halfCheckedKeys, checkedKeys))\n    };\n}\n// Remove useless key\nfunction cleanConductCheck(keys, halfKeys, levelEntities, maxLevel, syntheticGetCheckDisabled) {\n    var checkedKeys = new Set(keys);\n    var halfCheckedKeys = new Set(halfKeys);\n    // Remove checked keys from top to bottom\n    for(var level = 0; level <= maxLevel; level += 1){\n        var entities = levelEntities.get(level) || new Set();\n        entities.forEach(function(entity) {\n            var key = entity.key, node = entity.node, _entity$children2 = entity.children, children = _entity$children2 === void 0 ? [] : _entity$children2;\n            if (!checkedKeys.has(key) && !halfCheckedKeys.has(key) && !syntheticGetCheckDisabled(node)) {\n                children.filter(function(childEntity) {\n                    return !syntheticGetCheckDisabled(childEntity.node);\n                }).forEach(function(childEntity) {\n                    checkedKeys.delete(childEntity.key);\n                });\n            }\n        });\n    }\n    // Remove checked keys form bottom to top\n    halfCheckedKeys = new Set();\n    var visitedKeys = new Set();\n    for(var _level2 = maxLevel; _level2 >= 0; _level2 -= 1){\n        var _entities2 = levelEntities.get(_level2) || new Set();\n        _entities2.forEach(function(entity) {\n            var parent = entity.parent, node = entity.node;\n            // Skip if no need to check\n            if (syntheticGetCheckDisabled(node) || !entity.parent || visitedKeys.has(entity.parent.key)) {\n                return;\n            }\n            // Skip if parent is disabled\n            if (syntheticGetCheckDisabled(entity.parent.node)) {\n                visitedKeys.add(parent.key);\n                return;\n            }\n            var allChecked = true;\n            var partialChecked = false;\n            (parent.children || []).filter(function(childEntity) {\n                return !syntheticGetCheckDisabled(childEntity.node);\n            }).forEach(function(_ref3) {\n                var key = _ref3.key;\n                var checked = checkedKeys.has(key);\n                if (allChecked && !checked) {\n                    allChecked = false;\n                }\n                if (!partialChecked && (checked || halfCheckedKeys.has(key))) {\n                    partialChecked = true;\n                }\n            });\n            if (!allChecked) {\n                checkedKeys.delete(parent.key);\n            }\n            if (partialChecked) {\n                halfCheckedKeys.add(parent.key);\n            }\n            visitedKeys.add(parent.key);\n        });\n    }\n    return {\n        checkedKeys: Array.from(checkedKeys),\n        halfCheckedKeys: Array.from(removeFromCheckedKeys(halfCheckedKeys, checkedKeys))\n    };\n}\n/**\n * Conduct with keys.\n * @param keyList current key list\n * @param keyEntities key - dataEntity map\n * @param mode `fill` to fill missing key, `clean` to remove useless key\n */ function conductCheck(keyList, checked, keyEntities, getCheckDisabled) {\n    var warningMissKeys = [];\n    var syntheticGetCheckDisabled;\n    if (getCheckDisabled) {\n        syntheticGetCheckDisabled = getCheckDisabled;\n    } else {\n        syntheticGetCheckDisabled = isCheckDisabled;\n    }\n    // We only handle exist keys\n    var keys = new Set(keyList.filter(function(key) {\n        var hasEntity = !!(0,_keyUtil__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(keyEntities, key);\n        if (!hasEntity) {\n            warningMissKeys.push(key);\n        }\n        return hasEntity;\n    }));\n    var levelEntities = new Map();\n    var maxLevel = 0;\n    // Convert entities by level for calculation\n    Object.keys(keyEntities).forEach(function(key) {\n        var entity = keyEntities[key];\n        var level = entity.level;\n        var levelSet = levelEntities.get(level);\n        if (!levelSet) {\n            levelSet = new Set();\n            levelEntities.set(level, levelSet);\n        }\n        levelSet.add(entity);\n        maxLevel = Math.max(maxLevel, level);\n    });\n    (0,rc_util_es_warning__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(!warningMissKeys.length, \"Tree missing follow keys: \".concat(warningMissKeys.slice(0, 100).map(function(key) {\n        return \"'\".concat(key, \"'\");\n    }).join(\", \")));\n    var result;\n    if (checked === true) {\n        result = fillConductCheck(keys, levelEntities, maxLevel, syntheticGetCheckDisabled);\n    } else {\n        result = cleanConductCheck(keys, checked.halfCheckedKeys, levelEntities, maxLevel, syntheticGetCheckDisabled);\n    }\n    return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../node_modules/rc-tree/es/utils/conductUtil.js\n");

/***/ }),

/***/ "(ssr)/../../../node_modules/rc-tree/es/utils/keyUtil.js":
/*!*********************************************************!*\
  !*** ../../../node_modules/rc-tree/es/utils/keyUtil.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getEntity)\n/* harmony export */ });\nfunction getEntity(keyEntities, key) {\n    return keyEntities[key];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JjLXRyZWUvZXMvdXRpbHMva2V5VXRpbC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQWUsU0FBU0EsVUFBVUMsV0FBVyxFQUFFQyxHQUFHO0lBQ2hELE9BQU9ELFdBQVcsQ0FBQ0MsSUFBSTtBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovL2NoZWNrb3V0Ly4uLy4uLy4uL25vZGVfbW9kdWxlcy9yYy10cmVlL2VzL3V0aWxzL2tleVV0aWwuanM/Nzk4MSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRFbnRpdHkoa2V5RW50aXRpZXMsIGtleSkge1xuICByZXR1cm4ga2V5RW50aXRpZXNba2V5XTtcbn0iXSwibmFtZXMiOlsiZ2V0RW50aXR5Iiwia2V5RW50aXRpZXMiLCJrZXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../node_modules/rc-tree/es/utils/keyUtil.js\n");

/***/ }),

/***/ "(ssr)/../../../node_modules/rc-tree/es/utils/treeUtil.js":
/*!**********************************************************!*\
  !*** ../../../node_modules/rc-tree/es/utils/treeUtil.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertDataToEntities: () => (/* binding */ convertDataToEntities),\n/* harmony export */   convertNodePropsToEventData: () => (/* binding */ convertNodePropsToEventData),\n/* harmony export */   convertTreeToData: () => (/* binding */ convertTreeToData),\n/* harmony export */   fillFieldNames: () => (/* binding */ fillFieldNames),\n/* harmony export */   flattenTreeData: () => (/* binding */ flattenTreeData),\n/* harmony export */   getKey: () => (/* binding */ getKey),\n/* harmony export */   getPosition: () => (/* binding */ getPosition),\n/* harmony export */   getTreeNodeProps: () => (/* binding */ getTreeNodeProps),\n/* harmony export */   isTreeNode: () => (/* binding */ isTreeNode),\n/* harmony export */   traverseDataNodes: () => (/* binding */ traverseDataNodes),\n/* harmony export */   warningWithoutKey: () => (/* binding */ warningWithoutKey)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/typeof */ \"(ssr)/../../../node_modules/@babel/runtime/helpers/esm/typeof.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/toConsumableArray */ \"(ssr)/../../../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectSpread2 */ \"(ssr)/../../../node_modules/@babel/runtime/helpers/esm/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutProperties */ \"(ssr)/../../../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\");\n/* harmony import */ var rc_util_es_Children_toArray__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rc-util/es/Children/toArray */ \"(ssr)/../../../node_modules/rc-util/es/Children/toArray.js\");\n/* harmony import */ var rc_util_es_omit__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rc-util/es/omit */ \"(ssr)/../../../node_modules/rc-util/es/omit.js\");\n/* harmony import */ var rc_util_es_warning__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rc-util/es/warning */ \"(ssr)/../../../node_modules/rc-util/es/warning.js\");\n/* harmony import */ var _keyUtil__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./keyUtil */ \"(ssr)/../../../node_modules/rc-tree/es/utils/keyUtil.js\");\n\n\n\n\nvar _excluded = [\n    \"children\"\n];\n\n\n\n\nfunction getPosition(level, index) {\n    return \"\".concat(level, \"-\").concat(index);\n}\nfunction isTreeNode(node) {\n    return node && node.type && node.type.isTreeNode;\n}\nfunction getKey(key, pos) {\n    if (key !== null && key !== undefined) {\n        return key;\n    }\n    return pos;\n}\nfunction fillFieldNames(fieldNames) {\n    var _ref = fieldNames || {}, title = _ref.title, _title = _ref._title, key = _ref.key, children = _ref.children;\n    var mergedTitle = title || \"title\";\n    return {\n        title: mergedTitle,\n        _title: _title || [\n            mergedTitle\n        ],\n        key: key || \"key\",\n        children: children || \"children\"\n    };\n}\n/**\n * Warning if TreeNode do not provides key\n */ function warningWithoutKey(treeData, fieldNames) {\n    var keys = new Map();\n    function dig(list) {\n        var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n        (list || []).forEach(function(treeNode) {\n            var key = treeNode[fieldNames.key];\n            var children = treeNode[fieldNames.children];\n            (0,rc_util_es_warning__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(key !== null && key !== undefined, \"Tree node must have a certain key: [\".concat(path).concat(key, \"]\"));\n            var recordKey = String(key);\n            (0,rc_util_es_warning__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(!keys.has(recordKey) || key === null || key === undefined, \"Same 'key' exist in the Tree: \".concat(recordKey));\n            keys.set(recordKey, true);\n            dig(children, \"\".concat(path).concat(recordKey, \" > \"));\n        });\n    }\n    dig(treeData);\n}\n/**\n * Convert `children` of Tree into `treeData` structure.\n */ function convertTreeToData(rootNodes) {\n    function dig(node) {\n        var treeNodes = (0,rc_util_es_Children_toArray__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(node);\n        return treeNodes.map(function(treeNode) {\n            // Filter invalidate node\n            if (!isTreeNode(treeNode)) {\n                (0,rc_util_es_warning__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(!treeNode, \"Tree/TreeNode can only accept TreeNode as children.\");\n                return null;\n            }\n            var key = treeNode.key;\n            var _treeNode$props = treeNode.props, children = _treeNode$props.children, rest = (0,_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(_treeNode$props, _excluded);\n            var dataNode = (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({\n                key: key\n            }, rest);\n            var parsedChildren = dig(children);\n            if (parsedChildren.length) {\n                dataNode.children = parsedChildren;\n            }\n            return dataNode;\n        }).filter(function(dataNode) {\n            return dataNode;\n        });\n    }\n    return dig(rootNodes);\n}\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */ function flattenTreeData(treeNodeList, expandedKeys, fieldNames) {\n    var _fillFieldNames = fillFieldNames(fieldNames), fieldTitles = _fillFieldNames._title, fieldKey = _fillFieldNames.key, fieldChildren = _fillFieldNames.children;\n    var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n    var flattenList = [];\n    function dig(list) {\n        var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        return list.map(function(treeNode, index) {\n            var pos = getPosition(parent ? parent.pos : \"0\", index);\n            var mergedKey = getKey(treeNode[fieldKey], pos);\n            // Pick matched title in field title list\n            var mergedTitle;\n            for(var i = 0; i < fieldTitles.length; i += 1){\n                var fieldTitle = fieldTitles[i];\n                if (treeNode[fieldTitle] !== undefined) {\n                    mergedTitle = treeNode[fieldTitle];\n                    break;\n                }\n            }\n            // Add FlattenDataNode into list\n            var flattenNode = (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_2__[\"default\"])((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, (0,rc_util_es_omit__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(treeNode, [].concat((0,_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(fieldTitles), [\n                fieldKey,\n                fieldChildren\n            ]))), {}, {\n                title: mergedTitle,\n                key: mergedKey,\n                parent: parent,\n                pos: pos,\n                children: null,\n                data: treeNode,\n                isStart: [].concat((0,_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(parent ? parent.isStart : []), [\n                    index === 0\n                ]),\n                isEnd: [].concat((0,_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(parent ? parent.isEnd : []), [\n                    index === list.length - 1\n                ])\n            });\n            flattenList.push(flattenNode);\n            // Loop treeNode children\n            if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\n                flattenNode.children = dig(treeNode[fieldChildren] || [], flattenNode);\n            } else {\n                flattenNode.children = [];\n            }\n            return flattenNode;\n        });\n    }\n    dig(treeNodeList);\n    return flattenList;\n}\n/**\n * Traverse all the data by `treeData`.\n * Please not use it out of the `rc-tree` since we may refactor this code.\n */ function traverseDataNodes(dataNodes, callback, // To avoid too many params, let use config instead of origin param\nconfig) {\n    var mergedConfig = {};\n    if ((0,_babel_runtime_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(config) === \"object\") {\n        mergedConfig = config;\n    } else {\n        mergedConfig = {\n            externalGetKey: config\n        };\n    }\n    mergedConfig = mergedConfig || {};\n    // Init config\n    var _mergedConfig = mergedConfig, childrenPropName = _mergedConfig.childrenPropName, externalGetKey = _mergedConfig.externalGetKey, fieldNames = _mergedConfig.fieldNames;\n    var _fillFieldNames2 = fillFieldNames(fieldNames), fieldKey = _fillFieldNames2.key, fieldChildren = _fillFieldNames2.children;\n    var mergeChildrenPropName = childrenPropName || fieldChildren;\n    // Get keys\n    var syntheticGetKey;\n    if (externalGetKey) {\n        if (typeof externalGetKey === \"string\") {\n            syntheticGetKey = function syntheticGetKey(node) {\n                return node[externalGetKey];\n            };\n        } else if (typeof externalGetKey === \"function\") {\n            syntheticGetKey = function syntheticGetKey(node) {\n                return externalGetKey(node);\n            };\n        }\n    } else {\n        syntheticGetKey = function syntheticGetKey(node, pos) {\n            return getKey(node[fieldKey], pos);\n        };\n    }\n    // Process\n    function processNode(node, index, parent, pathNodes) {\n        var children = node ? node[mergeChildrenPropName] : dataNodes;\n        var pos = node ? getPosition(parent.pos, index) : \"0\";\n        var connectNodes = node ? [].concat((0,_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(pathNodes), [\n            node\n        ]) : [];\n        // Process node if is not root\n        if (node) {\n            var key = syntheticGetKey(node, pos);\n            var data = {\n                node: node,\n                index: index,\n                pos: pos,\n                key: key,\n                parentPos: parent.node ? parent.pos : null,\n                level: parent.level + 1,\n                nodes: connectNodes\n            };\n            callback(data);\n        }\n        // Process children node\n        if (children) {\n            children.forEach(function(subNode, subIndex) {\n                processNode(subNode, subIndex, {\n                    node: node,\n                    pos: pos,\n                    level: parent ? parent.level + 1 : -1\n                }, connectNodes);\n            });\n        }\n    }\n    processNode(null);\n}\n/**\n * Convert `treeData` into entity records.\n */ function convertDataToEntities(dataNodes) {\n    var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, initWrapper = _ref2.initWrapper, processEntity = _ref2.processEntity, onProcessFinished = _ref2.onProcessFinished, externalGetKey = _ref2.externalGetKey, childrenPropName = _ref2.childrenPropName, fieldNames = _ref2.fieldNames;\n    var /** @deprecated Use `config.externalGetKey` instead */ legacyExternalGetKey = arguments.length > 2 ? arguments[2] : undefined;\n    // Init config\n    var mergedExternalGetKey = externalGetKey || legacyExternalGetKey;\n    var posEntities = {};\n    var keyEntities = {};\n    var wrapper = {\n        posEntities: posEntities,\n        keyEntities: keyEntities\n    };\n    if (initWrapper) {\n        wrapper = initWrapper(wrapper) || wrapper;\n    }\n    traverseDataNodes(dataNodes, function(item) {\n        var node = item.node, index = item.index, pos = item.pos, key = item.key, parentPos = item.parentPos, level = item.level, nodes = item.nodes;\n        var entity = {\n            node: node,\n            nodes: nodes,\n            index: index,\n            key: key,\n            pos: pos,\n            level: level\n        };\n        var mergedKey = getKey(key, pos);\n        posEntities[pos] = entity;\n        keyEntities[mergedKey] = entity;\n        // Fill children\n        entity.parent = posEntities[parentPos];\n        if (entity.parent) {\n            entity.parent.children = entity.parent.children || [];\n            entity.parent.children.push(entity);\n        }\n        if (processEntity) {\n            processEntity(entity, wrapper);\n        }\n    }, {\n        externalGetKey: mergedExternalGetKey,\n        childrenPropName: childrenPropName,\n        fieldNames: fieldNames\n    });\n    if (onProcessFinished) {\n        onProcessFinished(wrapper);\n    }\n    return wrapper;\n}\n/**\n * Get TreeNode props with Tree props.\n */ function getTreeNodeProps(key, _ref3) {\n    var expandedKeys = _ref3.expandedKeys, selectedKeys = _ref3.selectedKeys, loadedKeys = _ref3.loadedKeys, loadingKeys = _ref3.loadingKeys, checkedKeys = _ref3.checkedKeys, halfCheckedKeys = _ref3.halfCheckedKeys, dragOverNodeKey = _ref3.dragOverNodeKey, dropPosition = _ref3.dropPosition, keyEntities = _ref3.keyEntities;\n    var entity = (0,_keyUtil__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(keyEntities, key);\n    var treeNodeProps = {\n        eventKey: key,\n        expanded: expandedKeys.indexOf(key) !== -1,\n        selected: selectedKeys.indexOf(key) !== -1,\n        loaded: loadedKeys.indexOf(key) !== -1,\n        loading: loadingKeys.indexOf(key) !== -1,\n        checked: checkedKeys.indexOf(key) !== -1,\n        halfChecked: halfCheckedKeys.indexOf(key) !== -1,\n        pos: String(entity ? entity.pos : \"\"),\n        // [Legacy] Drag props\n        // Since the interaction of drag is changed, the semantic of the props are\n        // not accuracy, I think it should be finally removed\n        dragOver: dragOverNodeKey === key && dropPosition === 0,\n        dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n        dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\n    };\n    return treeNodeProps;\n}\nfunction convertNodePropsToEventData(props) {\n    var data = props.data, expanded = props.expanded, selected = props.selected, checked = props.checked, loaded = props.loaded, loading = props.loading, halfChecked = props.halfChecked, dragOver = props.dragOver, dragOverGapTop = props.dragOverGapTop, dragOverGapBottom = props.dragOverGapBottom, pos = props.pos, active = props.active, eventKey = props.eventKey;\n    var eventData = (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_2__[\"default\"])((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, data), {}, {\n        expanded: expanded,\n        selected: selected,\n        checked: checked,\n        loaded: loaded,\n        loading: loading,\n        halfChecked: halfChecked,\n        dragOver: dragOver,\n        dragOverGapTop: dragOverGapTop,\n        dragOverGapBottom: dragOverGapBottom,\n        pos: pos,\n        active: active,\n        key: eventKey\n    });\n    if (!(\"props\" in eventData)) {\n        Object.defineProperty(eventData, \"props\", {\n            get: function get() {\n                (0,rc_util_es_warning__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(false, \"Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.\");\n                return props;\n            }\n        });\n    }\n    return eventData;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../node_modules/rc-tree/es/utils/treeUtil.js\n");

/***/ })

};
;